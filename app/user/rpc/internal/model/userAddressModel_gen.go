// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userAddressFieldNames          = builder.RawFieldNames(&UserAddress{})
	userAddressRows                = strings.Join(userAddressFieldNames, ",")
	userAddressRowsExpectAutoSet   = strings.Join(stringx.Remove(userAddressFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userAddressRowsWithPlaceHolder = strings.Join(stringx.Remove(userAddressFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheMallUserUserAddressIdPrefix = "cache:mallUser:userAddress:id:"
)

type (
	userAddressModel interface {
		Insert(ctx context.Context, data *UserAddress) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserAddress, error)
		Update(ctx context.Context, data *UserAddress) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserAddressModel struct {
		sqlc.CachedConn
		table string
	}

	UserAddress struct {
		Id            int64     `db:"id"`
		Uid           int64     `db:"uid"`            // 用户id
		Name          string    `db:"name"`           // 收货人名称
		Phone         string    `db:"phone"`          // 手机号
		IsDefault     int64     `db:"is_default"`     // 是否为默认地址
		PostCode      string    `db:"post_code"`      // 邮政编码
		Province      string    `db:"province"`       // 省份/直辖市
		City          string    `db:"city"`           // 城市
		Region        string    `db:"region"`         // 区
		DetailAddress string    `db:"detail_address"` // 详细地址(街道)
		CreateTime    time.Time `db:"create_time"`    // 数据创建时间[禁止在代码中赋值]
		UpdateTime    time.Time `db:"update_time"`    // 数据更新时间[禁止在代码中赋值]
	}
)

func newUserAddressModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUserAddressModel {
	return &defaultUserAddressModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`user_address`",
	}
}

func (m *defaultUserAddressModel) Delete(ctx context.Context, id int64) error {
	mallUserUserAddressIdKey := fmt.Sprintf("%s%v", cacheMallUserUserAddressIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, mallUserUserAddressIdKey)
	return err
}

func (m *defaultUserAddressModel) FindOne(ctx context.Context, id int64) (*UserAddress, error) {
	mallUserUserAddressIdKey := fmt.Sprintf("%s%v", cacheMallUserUserAddressIdPrefix, id)
	var resp UserAddress
	err := m.QueryRowCtx(ctx, &resp, mallUserUserAddressIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userAddressRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserAddressModel) Insert(ctx context.Context, data *UserAddress) (sql.Result, error) {
	mallUserUserAddressIdKey := fmt.Sprintf("%s%v", cacheMallUserUserAddressIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, userAddressRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Uid, data.Name, data.Phone, data.IsDefault, data.PostCode, data.Province, data.City, data.Region, data.DetailAddress)
	}, mallUserUserAddressIdKey)
	return ret, err
}

func (m *defaultUserAddressModel) Update(ctx context.Context, data *UserAddress) error {
	mallUserUserAddressIdKey := fmt.Sprintf("%s%v", cacheMallUserUserAddressIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userAddressRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Uid, data.Name, data.Phone, data.IsDefault, data.PostCode, data.Province, data.City, data.Region, data.DetailAddress, data.Id)
	}, mallUserUserAddressIdKey)
	return err
}

func (m *defaultUserAddressModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheMallUserUserAddressIdPrefix, primary)
}

func (m *defaultUserAddressModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userAddressRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserAddressModel) tableName() string {
	return m.table
}
