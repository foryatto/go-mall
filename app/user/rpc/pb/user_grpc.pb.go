// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: user.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	// 登录
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// 注册
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// 获取用户信息
	UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
	// 添加收货地址
	AddUserAddress(ctx context.Context, in *UserAddressAddReq, opts ...grpc.CallOption) (*UserAddressAddResp, error)
	// 编辑收货地址
	EditUserAddress(ctx context.Context, in *UserAddressEditReq, opts ...grpc.CallOption) (*UserAddressEditResp, error)
	// 删除收货地址
	DelUserAddress(ctx context.Context, in *UserAddressDelReq, opts ...grpc.CallOption) (*UserAddressDelResp, error)
	// 获取收货地址列表
	GetUserAddressList(ctx context.Context, in *UserAddressListReq, opts ...grpc.CallOption) (*UserAddressListResp, error)
	// 添加收藏
	AddUserCollection(ctx context.Context, in *UserCollectionAddReq, opts ...grpc.CallOption) (*UserCollectionAddResp, error)
	// 删除收藏
	DelUserCollection(ctx context.Context, in *UserCollectionDelReq, opts ...grpc.CallOption) (*UserCollectionDelResp, error)
	// 收藏列表
	GetUserCollectionList(ctx context.Context, in *UserCollectionListReq, opts ...grpc.CallOption) (*UserCollectionListResp, error)
	// 根据主键id,查询收货地址
	GetUserAddressInfo(ctx context.Context, in *UserAddressInfoReq, opts ...grpc.CallOption) (*UserAddress, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/pb.User/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/pb.User/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	out := new(UserInfoResponse)
	err := c.cc.Invoke(ctx, "/pb.User/UserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddUserAddress(ctx context.Context, in *UserAddressAddReq, opts ...grpc.CallOption) (*UserAddressAddResp, error) {
	out := new(UserAddressAddResp)
	err := c.cc.Invoke(ctx, "/pb.User/addUserAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) EditUserAddress(ctx context.Context, in *UserAddressEditReq, opts ...grpc.CallOption) (*UserAddressEditResp, error) {
	out := new(UserAddressEditResp)
	err := c.cc.Invoke(ctx, "/pb.User/editUserAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DelUserAddress(ctx context.Context, in *UserAddressDelReq, opts ...grpc.CallOption) (*UserAddressDelResp, error) {
	out := new(UserAddressDelResp)
	err := c.cc.Invoke(ctx, "/pb.User/delUserAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserAddressList(ctx context.Context, in *UserAddressListReq, opts ...grpc.CallOption) (*UserAddressListResp, error) {
	out := new(UserAddressListResp)
	err := c.cc.Invoke(ctx, "/pb.User/getUserAddressList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddUserCollection(ctx context.Context, in *UserCollectionAddReq, opts ...grpc.CallOption) (*UserCollectionAddResp, error) {
	out := new(UserCollectionAddResp)
	err := c.cc.Invoke(ctx, "/pb.User/addUserCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DelUserCollection(ctx context.Context, in *UserCollectionDelReq, opts ...grpc.CallOption) (*UserCollectionDelResp, error) {
	out := new(UserCollectionDelResp)
	err := c.cc.Invoke(ctx, "/pb.User/delUserCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserCollectionList(ctx context.Context, in *UserCollectionListReq, opts ...grpc.CallOption) (*UserCollectionListResp, error) {
	out := new(UserCollectionListResp)
	err := c.cc.Invoke(ctx, "/pb.User/getUserCollectionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserAddressInfo(ctx context.Context, in *UserAddressInfoReq, opts ...grpc.CallOption) (*UserAddress, error) {
	out := new(UserAddress)
	err := c.cc.Invoke(ctx, "/pb.User/getUserAddressInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	// 登录
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// 注册
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	// 获取用户信息
	UserInfo(context.Context, *UserInfoRequest) (*UserInfoResponse, error)
	// 添加收货地址
	AddUserAddress(context.Context, *UserAddressAddReq) (*UserAddressAddResp, error)
	// 编辑收货地址
	EditUserAddress(context.Context, *UserAddressEditReq) (*UserAddressEditResp, error)
	// 删除收货地址
	DelUserAddress(context.Context, *UserAddressDelReq) (*UserAddressDelResp, error)
	// 获取收货地址列表
	GetUserAddressList(context.Context, *UserAddressListReq) (*UserAddressListResp, error)
	// 添加收藏
	AddUserCollection(context.Context, *UserCollectionAddReq) (*UserCollectionAddResp, error)
	// 删除收藏
	DelUserCollection(context.Context, *UserCollectionDelReq) (*UserCollectionDelResp, error)
	// 收藏列表
	GetUserCollectionList(context.Context, *UserCollectionListReq) (*UserCollectionListResp, error)
	// 根据主键id,查询收货地址
	GetUserAddressInfo(context.Context, *UserAddressInfoReq) (*UserAddress, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserServer) UserInfo(context.Context, *UserInfoRequest) (*UserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfo not implemented")
}
func (UnimplementedUserServer) AddUserAddress(context.Context, *UserAddressAddReq) (*UserAddressAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserAddress not implemented")
}
func (UnimplementedUserServer) EditUserAddress(context.Context, *UserAddressEditReq) (*UserAddressEditResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditUserAddress not implemented")
}
func (UnimplementedUserServer) DelUserAddress(context.Context, *UserAddressDelReq) (*UserAddressDelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUserAddress not implemented")
}
func (UnimplementedUserServer) GetUserAddressList(context.Context, *UserAddressListReq) (*UserAddressListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAddressList not implemented")
}
func (UnimplementedUserServer) AddUserCollection(context.Context, *UserCollectionAddReq) (*UserCollectionAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserCollection not implemented")
}
func (UnimplementedUserServer) DelUserCollection(context.Context, *UserCollectionDelReq) (*UserCollectionDelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUserCollection not implemented")
}
func (UnimplementedUserServer) GetUserCollectionList(context.Context, *UserCollectionListReq) (*UserCollectionListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCollectionList not implemented")
}
func (UnimplementedUserServer) GetUserAddressInfo(context.Context, *UserAddressInfoReq) (*UserAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAddressInfo not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/UserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserInfo(ctx, req.(*UserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddUserAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAddressAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddUserAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/addUserAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddUserAddress(ctx, req.(*UserAddressAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_EditUserAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAddressEditReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).EditUserAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/editUserAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).EditUserAddress(ctx, req.(*UserAddressEditReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DelUserAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAddressDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DelUserAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/delUserAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DelUserAddress(ctx, req.(*UserAddressDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserAddressList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAddressListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserAddressList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/getUserAddressList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserAddressList(ctx, req.(*UserAddressListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddUserCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCollectionAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddUserCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/addUserCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddUserCollection(ctx, req.(*UserCollectionAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DelUserCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCollectionDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DelUserCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/delUserCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DelUserCollection(ctx, req.(*UserCollectionDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserCollectionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCollectionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserCollectionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/getUserCollectionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserCollectionList(ctx, req.(*UserCollectionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserAddressInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAddressInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserAddressInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/getUserAddressInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserAddressInfo(ctx, req.(*UserAddressInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _User_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _User_Register_Handler,
		},
		{
			MethodName: "UserInfo",
			Handler:    _User_UserInfo_Handler,
		},
		{
			MethodName: "addUserAddress",
			Handler:    _User_AddUserAddress_Handler,
		},
		{
			MethodName: "editUserAddress",
			Handler:    _User_EditUserAddress_Handler,
		},
		{
			MethodName: "delUserAddress",
			Handler:    _User_DelUserAddress_Handler,
		},
		{
			MethodName: "getUserAddressList",
			Handler:    _User_GetUserAddressList_Handler,
		},
		{
			MethodName: "addUserCollection",
			Handler:    _User_AddUserCollection_Handler,
		},
		{
			MethodName: "delUserCollection",
			Handler:    _User_DelUserCollection_Handler,
		},
		{
			MethodName: "getUserCollectionList",
			Handler:    _User_GetUserCollectionList_Handler,
		},
		{
			MethodName: "getUserAddressInfo",
			Handler:    _User_GetUserAddressInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
