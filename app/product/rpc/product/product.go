// Code generated by goctl. DO NOT EDIT.
// Source: product.proto

package product

import (
	"context"

	"mall/app/product/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CheckAndUpdateStockReq  = pb.CheckAndUpdateStockReq
	CheckAndUpdateStockResp = pb.CheckAndUpdateStockResp
	DecrStockReq            = pb.DecrStockReq
	DecrStockResp           = pb.DecrStockResp
	HotProductsReq          = pb.HotProductsReq
	HotProductsResp         = pb.HotProductsResp
	ProductItem             = pb.ProductItem
	ProductItemReq          = pb.ProductItemReq
	ProductListReq          = pb.ProductListReq
	ProductListResp         = pb.ProductListResp
	ProductReq              = pb.ProductReq
	ProductResp             = pb.ProductResp
	UpdateProductStockReq   = pb.UpdateProductStockReq
	UpdateProductStockResp  = pb.UpdateProductStockResp

	Product interface {
		Product(ctx context.Context, in *ProductItemReq, opts ...grpc.CallOption) (*ProductItem, error)
		Products(ctx context.Context, in *ProductReq, opts ...grpc.CallOption) (*ProductResp, error)
		ProductList(ctx context.Context, in *ProductListReq, opts ...grpc.CallOption) (*ProductListResp, error)
		HotProducts(ctx context.Context, in *HotProductsReq, opts ...grpc.CallOption) (*HotProductsResp, error)
		UpdateProductStock(ctx context.Context, in *UpdateProductStockReq, opts ...grpc.CallOption) (*UpdateProductStockResp, error)
		CheckAndUpdateStock(ctx context.Context, in *CheckAndUpdateStockReq, opts ...grpc.CallOption) (*CheckAndUpdateStockResp, error)
		CheckProductStock(ctx context.Context, in *UpdateProductStockReq, opts ...grpc.CallOption) (*UpdateProductStockResp, error)
		RollbackProductStock(ctx context.Context, in *UpdateProductStockReq, opts ...grpc.CallOption) (*UpdateProductStockResp, error)
		DecrStock(ctx context.Context, in *DecrStockReq, opts ...grpc.CallOption) (*DecrStockResp, error)
		DecrStockRevert(ctx context.Context, in *DecrStockReq, opts ...grpc.CallOption) (*DecrStockResp, error)
	}

	defaultProduct struct {
		cli zrpc.Client
	}
)

func NewProduct(cli zrpc.Client) Product {
	return &defaultProduct{
		cli: cli,
	}
}

func (m *defaultProduct) Product(ctx context.Context, in *ProductItemReq, opts ...grpc.CallOption) (*ProductItem, error) {
	client := pb.NewProductClient(m.cli.Conn())
	return client.Product(ctx, in, opts...)
}

func (m *defaultProduct) Products(ctx context.Context, in *ProductReq, opts ...grpc.CallOption) (*ProductResp, error) {
	client := pb.NewProductClient(m.cli.Conn())
	return client.Products(ctx, in, opts...)
}

func (m *defaultProduct) ProductList(ctx context.Context, in *ProductListReq, opts ...grpc.CallOption) (*ProductListResp, error) {
	client := pb.NewProductClient(m.cli.Conn())
	return client.ProductList(ctx, in, opts...)
}

func (m *defaultProduct) HotProducts(ctx context.Context, in *HotProductsReq, opts ...grpc.CallOption) (*HotProductsResp, error) {
	client := pb.NewProductClient(m.cli.Conn())
	return client.HotProducts(ctx, in, opts...)
}

func (m *defaultProduct) UpdateProductStock(ctx context.Context, in *UpdateProductStockReq, opts ...grpc.CallOption) (*UpdateProductStockResp, error) {
	client := pb.NewProductClient(m.cli.Conn())
	return client.UpdateProductStock(ctx, in, opts...)
}

func (m *defaultProduct) CheckAndUpdateStock(ctx context.Context, in *CheckAndUpdateStockReq, opts ...grpc.CallOption) (*CheckAndUpdateStockResp, error) {
	client := pb.NewProductClient(m.cli.Conn())
	return client.CheckAndUpdateStock(ctx, in, opts...)
}

func (m *defaultProduct) CheckProductStock(ctx context.Context, in *UpdateProductStockReq, opts ...grpc.CallOption) (*UpdateProductStockResp, error) {
	client := pb.NewProductClient(m.cli.Conn())
	return client.CheckProductStock(ctx, in, opts...)
}

func (m *defaultProduct) RollbackProductStock(ctx context.Context, in *UpdateProductStockReq, opts ...grpc.CallOption) (*UpdateProductStockResp, error) {
	client := pb.NewProductClient(m.cli.Conn())
	return client.RollbackProductStock(ctx, in, opts...)
}

func (m *defaultProduct) DecrStock(ctx context.Context, in *DecrStockReq, opts ...grpc.CallOption) (*DecrStockResp, error) {
	client := pb.NewProductClient(m.cli.Conn())
	return client.DecrStock(ctx, in, opts...)
}

func (m *defaultProduct) DecrStockRevert(ctx context.Context, in *DecrStockReq, opts ...grpc.CallOption) (*DecrStockResp, error) {
	client := pb.NewProductClient(m.cli.Conn())
	return client.DecrStockRevert(ctx, in, opts...)
}
